<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.1 (Python 3.7.1 on win32)" generated="20190412 03:17:16.312" rpa="false">
<suite id="s1" name="DB example" source="C:\Users\sedky\PycharmProjects\DB_Access\DB_example.robot">
<kw name="Connect To Database" library="DatabaseLibrary" type="setup">
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using `dbName`, `dbUsername`, and `dbPassword`.</doc>
<arguments>
<arg>pymysql</arg>
<arg>${DBName}</arg>
<arg>${DBUser}</arg>
<arg>${DBPass}</arg>
<arg>${DBHost}</arg>
<arg>${DBPort}</arg>
</arguments>
<msg timestamp="20190412 03:17:16.578" level="INFO">Connecting using : pymysql.connect(db=employees, user=root, passwd=Sedky24303252, host=127.0.0.1, port=3306, charset=None) </msg>
<status status="PASS" starttime="20190412 03:17:16.562" endtime="20190412 03:17:16.593"></status>
</kw>
<test id="s1-t1" name="Validating Number of Employess">
<kw name="Row Count" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query the database and returns the number of rows from the query. Set
optional input `sansTran` to True to run command without an explicit transaction commit or rollback.</doc>
<arguments>
<arg>${Get_number_of_employees_query}</arg>
</arguments>
<assign>
<var>${Get_number_of_employees}</var>
</assign>
<msg timestamp="20190412 03:17:16.593" level="INFO">Executing : Row Count  |  Select * from employees.employees </msg>
<msg timestamp="20190412 03:17:23.302" level="INFO">${Get_number_of_employees} = 300024</msg>
<status status="PASS" starttime="20190412 03:17:16.593" endtime="20190412 03:17:23.302"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Get_number_of_employees}</arg>
</arguments>
<msg timestamp="20190412 03:17:23.302" level="INFO">300024</msg>
<status status="PASS" starttime="20190412 03:17:23.302" endtime="20190412 03:17:23.302"></status>
</kw>
<status status="PASS" starttime="20190412 03:17:16.593" endtime="20190412 03:17:23.302" critical="yes"></status>
</test>
<test id="s1-t2" name="Validating Number of Employess per Gender and Joining Date">
<kw name="Query" library="DatabaseLibrary">
<doc>Uses the input `selectStatement` to query for the values that will be returned as a list of tuples. Set optional
input `sansTran` to True to run command without an explicit transaction commit or rollback.
Set optional input `returnAsDict` to True to return values as a list of dictionaries.</doc>
<arguments>
<arg>${Get_emps_count_per_hiring_date_query}</arg>
</arguments>
<assign>
<var>@{Get_emps_count_per_hiring_date}</var>
</assign>
<msg timestamp="20190412 03:17:23.302" level="INFO">Executing : Query  |  Select count(emp_no) No_of_employess,gender from employees.employees Where hire_date&lt; DATE_ADD(curdate(),INTERVAL -5 year) group by gender </msg>
<msg timestamp="20190412 03:17:23.692" level="INFO">@{Get_emps_count_per_hiring_date} = [ (179973, 'M') | (120051, 'F') ]</msg>
<status status="PASS" starttime="20190412 03:17:23.302" endtime="20190412 03:17:23.692"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Get_emps_count_per_hiring_date}</arg>
</arguments>
<msg timestamp="20190412 03:17:23.692" level="INFO">[(179973, 'M'), (120051, 'F')]</msg>
<status status="PASS" starttime="20190412 03:17:23.692" endtime="20190412 03:17:23.692"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${Get_emps_count_per_hiring_date[0][0]}</arg>
</arguments>
<assign>
<var>${Male_results}</var>
</assign>
<msg timestamp="20190412 03:17:23.692" level="INFO">${Male_results} = 179973</msg>
<status status="PASS" starttime="20190412 03:17:23.692" endtime="20190412 03:17:23.692"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${Get_emps_count_per_hiring_date[1][0]}</arg>
</arguments>
<assign>
<var>${Female_results}</var>
</assign>
<msg timestamp="20190412 03:17:23.692" level="INFO">${Female_results} = 120051</msg>
<status status="PASS" starttime="20190412 03:17:23.692" endtime="20190412 03:17:23.692"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Male_results}</arg>
</arguments>
<msg timestamp="20190412 03:17:23.692" level="INFO">179973</msg>
<status status="PASS" starttime="20190412 03:17:23.692" endtime="20190412 03:17:23.692"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Female_results}</arg>
</arguments>
<msg timestamp="20190412 03:17:23.692" level="INFO">120051</msg>
<status status="PASS" starttime="20190412 03:17:23.692" endtime="20190412 03:17:23.692"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>Male Employees are ${Male_results} while Female Employess are ${Female_results}</arg>
</arguments>
<assign>
<var>${Total_Values}</var>
</assign>
<msg timestamp="20190412 03:17:23.708" level="INFO">${Total_Values} = Male Employees are 179973 while Female Employess are 120051</msg>
<status status="PASS" starttime="20190412 03:17:23.708" endtime="20190412 03:17:23.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${Total_Values}</arg>
</arguments>
<msg timestamp="20190412 03:17:23.708" level="INFO">Male Employees are 179973 while Female Employess are 120051</msg>
<status status="PASS" starttime="20190412 03:17:23.708" endtime="20190412 03:17:23.708"></status>
</kw>
<status status="PASS" starttime="20190412 03:17:23.302" endtime="20190412 03:17:23.708" critical="yes"></status>
</test>
<doc>Suite description</doc>
<status status="PASS" starttime="20190412 03:17:16.312" endtime="20190412 03:17:23.708"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="0">Critical Tests</stat>
<stat pass="2" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="2" fail="0" id="s1" name="DB example">DB example</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
